@using MCHMIS.Extensions
@model MCHMIS.ViewModels.PrePayrollSummaryViewModel
@{
    ViewBag.Title = "Pre-Payroll Checks for " + Model.PrePayrollCheck.PaymentCycle.Name;
    var userTasks = Statics.UserProfileByName();
}
@section buttons{
    @if (Model.PrePayrollCheck.StatusId == 1)
    {
        <a asp-action="SendForApproval" class="btn modal-link  btn-primary pull-right" asp-route-id="@Model.Id">Send for Approval</a>
    }
    @if (Model.PrePayrollCheck.StatusId == 2)
    {
        <a asp-action="Approvals" class="btn modal-link  btn-primary pull-right" asp-route-id="@Model.Id">Approvals</a>
    }
}

<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>Exception</th>
            <th>No. of Exceptions</th>
            <th>No. Actioned</th>
            <th>No. Not Proceeding to Payroll</th>
            <th>No. Proceeding to Payroll</th>
    </thead>
    <tbody>
        @foreach (var item in Model.Exceptions)
        {
            <tr>
                <td>@item.Name</td>
                <td>@Model.PrePayrollChecksDetails.Count(e => e.ExceptionId == item.Id).ToString("##,##0")</td>
                <td>@Model.PrePayrollChecksDetails.Count(e => e.ExceptionId == item.Id && e.ActionId != null).ToString("##,##0")</td>
                <td>@Model.PrePayrollChecksDetails.Count(e => e.ExceptionId == item.Id && (e.Action != null && e.Action.CanProceed == false || e.Action == null)).ToString("##,##0")</td>
                <td>@Model.PrePayrollChecksDetails.Count(e => e.ExceptionId == item.Id && (e.Action != null && e.Action.CanProceed)).ToString("##,##0")</td>
            </tr>
        }
    </tbody>
</table>
@if (Model.PrePayrollCheck.StatusId == 2 && userTasks.Contains("Payments:Approves Pre-Payroll Checks"))
{
    using (Html.BeginForm("Approvals", "PrePayrollChecks", FormMethod.Post, new { @class = "form-vertical", role = "form" }))
    {
        <div class="action-cont col-md-12">
            <div class=" col-md-12 form-group">
                <label class="control-label">Notes</label>
                <span class="field-validation-valid notes-error text-danger">*This field is required.</span>
                @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control approval-notes" } })
            </div>

            <div class="form-group col-md-12 padding-top">
                <hr />
                @Html.ActionLink(" Back", "Index", null, new { @class = "btn btn-back btn-danger glyphicon glyphicon-step-backward" })
                <button type="submit" class="btn btn-success pull-right btn-approve">
                    <i class="glyphicon glyphicon-ok-sign"></i> Approve
                </button>
                <button type="submit" class="btn btn-danger pull-right btn-reject">
                    <i class="glyphicon glyphicon-remove"></i> Reject
                </button>
                <input type="hidden" name="Action" id="action" />
            </div>
            @Html.HiddenFor(m => m.Id)
        </div>
    }
}

<a asp-action="Index" class="btn btn-danger glyphicon glyphicon-step-backward pull-left"> Back</a>