// <auto-generated />
using System;
using MCHMIS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MCHMIS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210318093110_CVListsViewModelHealthFacilityId")]
    partial class CVListsViewModelHealthFacilityId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Enrolment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApprovalNotes");

                    b.Property<string>("ApprovedById");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateApproved");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateImported");

                    b.Property<int>("HouseholdsGenerated");

                    b.Property<int>("HouseholdsValidated");

                    b.Property<string>("ImportApprovalNotes");

                    b.Property<string>("ImportApprovedById");

                    b.Property<DateTime?>("ImportDateApproved");

                    b.Property<int?>("ImportStatusId");

                    b.Property<string>("ImportedById");

                    b.Property<string>("Notes");

                    b.Property<int>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ImportApprovedById");

                    b.HasIndex("ImportStatusId");

                    b.HasIndex("ImportedById");

                    b.HasIndex("StatusId");

                    b.ToTable("Enrolments");
                });

            modelBuilder.Entity("EnrolmentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerName");

                    b.Property<string>("CustomerType");

                    b.Property<int>("EnrolmentId");

                    b.Property<bool>("HasProxy");

                    b.Property<string>("HouseholdId");

                    b.Property<string>("RecipientNames");

                    b.Property<string>("RecipientPhone");

                    b.Property<int?>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("EnrolmentId");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("StatusId");

                    b.ToTable("EnrolmentDetails");
                });

            modelBuilder.Entity("MCHMIS.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<int?>("HealthFacilityId");

                    b.Property<string>("IdNumber");

                    b.Property<bool>("IsLoggedIn");

                    b.Property<DateTime?>("LastActivityDate");

                    b.Property<DateTime?>("LastPasswordChangedDate");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MacAddress");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int?>("SubCountyId");

                    b.Property<string>("Surname");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SubCountyId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MCHMIS.Models.ApprovalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ApprovalStatus");
                });

            modelBuilder.Entity("MCHMIS.Models.AuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChangeType");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("NewValue");

                    b.Property<string>("OldValue");

                    b.Property<string>("PCName");

                    b.Property<string>("RecordId");

                    b.Property<string>("RequestIpAddress");

                    b.Property<string>("TableName");

                    b.Property<string>("UserAgent");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuditTrail");
                });

            modelBuilder.Entity("MCHMIS.Models.Beneficiary", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BeneficiaryName");

                    b.Property<int?>("CommunityAreaId");

                    b.Property<DateTime>("DOB");

                    b.Property<DateTime?>("DateEnrolled");

                    b.Property<DateTime?>("EDD");

                    b.Property<int?>("EnrolmentId");

                    b.Property<int>("HealthFacilityId");

                    b.Property<string>("HouseholdId");

                    b.Property<string>("IdNumber");

                    b.Property<int?>("IdentificationFormId");

                    b.Property<string>("MotherId");

                    b.Property<string>("RecipientName");

                    b.Property<string>("RecipientPhone");

                    b.Property<int?>("StatusId");

                    b.Property<string>("UniqueId");

                    b.Property<int?>("VillageId");

                    b.HasKey("Id");

                    b.HasIndex("CommunityAreaId");

                    b.HasIndex("EnrolmentId");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("IdentificationFormId");

                    b.HasIndex("MotherId");

                    b.HasIndex("StatusId");

                    b.HasIndex("VillageId");

                    b.ToTable("Beneficiaries");
                });

            modelBuilder.Entity("MCHMIS.Models.BeneficiaryPaymentPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaseManagementId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("HouseholdId");

                    b.Property<int>("PaymentPointId");

                    b.Property<int?>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("PaymentPointId");

                    b.HasIndex("StatusId");

                    b.ToTable("BeneficiaryPaymentPoints");
                });

            modelBuilder.Entity("MCHMIS.Models.CaseManagement", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateExited");

                    b.Property<string>("HouseholdId");

                    b.Property<DateTime?>("LastVisit");

                    b.Property<int>("MissedVisits");

                    b.Property<DateTime?>("NextVisit");

                    b.Property<int?>("NextVisitClinicId");

                    b.Property<int?>("ReasonId");

                    b.Property<int?>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("ReasonId");

                    b.HasIndex("StatusId");

                    b.ToTable("CaseManagement");
                });

            modelBuilder.Entity("MCHMIS.Models.CaseManagementStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CaseManagementStatus");
                });

            modelBuilder.Entity("MCHMIS.Models.CaseManagementSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("HealthFacilityId");

                    b.Property<int>("Missed");

                    b.Property<int>("PeriodId");

                    b.Property<int>("Updated");

                    b.Property<int?>("VisitTypeId");

                    b.Property<int?>("WardId");

                    b.HasKey("Id");

                    b.ToTable("CaseManagementSummary");
                });

            modelBuilder.Entity("MCHMIS.Models.Change", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionedById");

                    b.Property<string>("ApprovalNotes");

                    b.Property<int?>("ChangeTypeId")
                        .IsRequired();

                    b.Property<string>("ChildId");

                    b.Property<string>("CreatedById");

                    b.Property<int?>("CurrentHealthFacilityId");

                    b.Property<string>("CustomerName");

                    b.Property<string>("CustomerType");

                    b.Property<DateTime?>("DateActioned");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateMPESAVerified");

                    b.Property<DateTime?>("DeathDate");

                    b.Property<int?>("DestinationHealthFacilityId");

                    b.Property<byte[]>("FingerPrint");

                    b.Property<bool>("FingerPrintVerified");

                    b.Property<string>("HouseholdId");

                    b.Property<int?>("IPRSExceptionId");

                    b.Property<bool?>("IPRSPassed");

                    b.Property<bool?>("IPRSVerified");

                    b.Property<int?>("MPESACheckStatusId");

                    b.Property<string>("NOKFirstName");

                    b.Property<string>("NOKIdNumber");

                    b.Property<string>("NOKMiddleName");

                    b.Property<string>("NOKPhone")
                        .HasMaxLength(10);

                    b.Property<string>("NOKSurname");

                    b.Property<string>("NomineeFirstName");

                    b.Property<string>("NomineeIdNumber");

                    b.Property<string>("NomineeMiddleName");

                    b.Property<string>("NomineeSurname");

                    b.Property<string>("Notes");

                    b.Property<DateTime?>("NotificationDate");

                    b.Property<bool>("OwnsPhone");

                    b.Property<int>("OwnsPhoneId");

                    b.Property<string>("Phone");

                    b.Property<byte[]>("RawFingerPrint");

                    b.Property<string>("RecipientNames");

                    b.Property<bool>("RequiresIPRSCheck");

                    b.Property<bool>("RequiresMPESACheck");

                    b.Property<int>("StatusId");

                    b.Property<string>("SupportingDocument");

                    b.Property<bool>("TakingFingerPrint");

                    b.HasKey("Id");

                    b.HasIndex("ActionedById");

                    b.HasIndex("ChangeTypeId");

                    b.HasIndex("ChildId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrentHealthFacilityId");

                    b.HasIndex("DestinationHealthFacilityId");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("MPESACheckStatusId");

                    b.HasIndex("StatusId");

                    b.ToTable("Changes");
                });

            modelBuilder.Entity("MCHMIS.Models.ChangeNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChangeId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Note");

                    b.HasKey("Id");

                    b.HasIndex("ChangeId");

                    b.HasIndex("CreatedById");

                    b.ToTable("ChangeNotes");
                });

            modelBuilder.Entity("MCHMIS.Models.Child", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BirthLength");

                    b.Property<string>("BirthOrder");

                    b.Property<string>("BirthWeight");

                    b.Property<DateTime?>("DOB");

                    b.Property<string>("DateFirstSeen");

                    b.Property<int?>("DeliveryAssistantId");

                    b.Property<int?>("DeliveryHealthFacilityId");

                    b.Property<string>("DeliveryId");

                    b.Property<int?>("DeliveryPlaceId");

                    b.Property<int?>("GenderId");

                    b.Property<int?>("GestationAtBirth");

                    b.Property<string>("HeadCircumference");

                    b.Property<int?>("ImmunizedId");

                    b.Property<string>("Name");

                    b.Property<string>("OtherBirthCharacteristics");

                    b.Property<string>("OtherDeliveryAssistant");

                    b.Property<string>("OtherDeliveryHealthFacility");

                    b.Property<string>("OtherDeliveryPlace");

                    b.Property<int?>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryAssistantId");

                    b.HasIndex("DeliveryHealthFacilityId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("DeliveryPlaceId");

                    b.HasIndex("GenderId");

                    b.HasIndex("ImmunizedId");

                    b.HasIndex("StatusId");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("MCHMIS.Models.ChildDevelopmentMilestone", b =>
                {
                    b.Property<string>("ChildId");

                    b.Property<int>("DevelopmentMilestoneId");

                    b.Property<int>("AgeAchieved");

                    b.HasKey("ChildId", "DevelopmentMilestoneId");

                    b.ToTable("ChildDevelopmentMilestones");
                });

            modelBuilder.Entity("MCHMIS.Models.ChildFeedingInformation", b =>
                {
                    b.Property<string>("ChildId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BreastfeedingId");

                    b.Property<int?>("BreastfeedingId1");

                    b.Property<string>("CaseManagementId");

                    b.Property<string>("ComplimentaryFoodIntroducedId");

                    b.Property<int?>("ComplimentaryFoodIntroducedId1");

                    b.Property<string>("FeedRetention");

                    b.Property<string>("OtherFoodIntroducedAge");

                    b.Property<string>("OtherFoodIntroducedId");

                    b.Property<int?>("OtherFoodIntroducedId1");

                    b.Property<string>("PregnancyId");

                    b.HasKey("ChildId");

                    b.HasIndex("BreastfeedingId1");

                    b.HasIndex("ComplimentaryFoodIntroducedId1");

                    b.HasIndex("OtherFoodIntroducedId1");

                    b.HasIndex("PregnancyId");

                    b.ToTable("ChildFeedingInformation");
                });

            modelBuilder.Entity("MCHMIS.Models.ChildHealthRecord", b =>
                {
                    b.Property<string>("ChildId");

                    b.Property<string>("BirthNotificationNumber");

                    b.Property<string>("CWCNumber");

                    b.Property<string>("CaseManagementId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int?>("DeliveryPlaceId")
                        .IsRequired();

                    b.Property<int?>("HealthFacilityId");

                    b.Property<string>("HealthFacilityName");

                    b.Property<string>("MFLNumber")
                        .IsRequired();

                    b.Property<string>("OtherDeliveryPlace");

                    b.Property<string>("PermanentRegisterNumber");

                    b.Property<string>("PregnancyId");

                    b.HasKey("ChildId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeliveryPlaceId");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("PregnancyId");

                    b.ToTable("ChildHealthRecords");
                });

            modelBuilder.Entity("MCHMIS.Models.CivilRegistration", b =>
                {
                    b.Property<string>("ChildId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BirthCertificate");

                    b.Property<bool>("BirthCertificateAvailable");

                    b.Property<string>("BirthCertificateNumber");

                    b.Property<string>("BirthMark");

                    b.Property<string>("CaseManagementId");

                    b.Property<string>("CongenitalAbnormalities");

                    b.Property<string>("PregnancyId");

                    b.Property<DateTime?>("RegistrationDate");

                    b.Property<string>("RegistrationPlace");

                    b.Property<string>("SpecialBirth");

                    b.HasKey("ChildId");

                    b.HasIndex("PregnancyId");

                    b.ToTable("CivilRegistrations");
                });

            modelBuilder.Entity("MCHMIS.Models.ClinicVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<int?>("PaymentPointId");

                    b.Property<int?>("VisitTypeId");

                    b.HasKey("Id");

                    b.HasIndex("PaymentPointId");

                    b.HasIndex("VisitTypeId");

                    b.ToTable("ClinicVisits");
                });

            modelBuilder.Entity("MCHMIS.Models.CommunityArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int>("VillageId");

                    b.HasKey("Id");

                    b.HasIndex("VillageId");

                    b.ToTable("CommunityAreas");
                });

            modelBuilder.Entity("MCHMIS.Models.CommunityValidationSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("HealthFacilityId");

                    b.Property<int>("High");

                    b.Property<int>("Low");

                    b.Property<int>("Medium");

                    b.Property<int>("PeriodId");

                    b.Property<int?>("WardId");

                    b.HasKey("Id");

                    b.ToTable("CommunityValidationSummary");
                });

            modelBuilder.Entity("MCHMIS.Models.Complaint", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionTaken");

                    b.Property<string>("ApprovedById");

                    b.Property<int?>("CategoryId");

                    b.Property<string>("ClosedById");

                    b.Property<DateTime?>("ComplaintDate");

                    b.Property<int?>("ComplaintTypeId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateApproved");

                    b.Property<DateTime?>("DateClosed");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateResolved");

                    b.Property<string>("Description");

                    b.Property<string>("EscalatedById");

                    b.Property<DateTime?>("EscalationDate");

                    b.Property<string>("Form");

                    b.Property<int>("HealthFacilityId");

                    b.Property<string>("IdNumber");

                    b.Property<int>("IsComplainantAnonymousId");

                    b.Property<int?>("IsComplainantBeneficiaryId");

                    b.Property<string>("NOKIdNumber");

                    b.Property<string>("NOKName");

                    b.Property<string>("NOKPhone")
                        .HasMaxLength(10);

                    b.Property<string>("Name");

                    b.Property<string>("OtherComplaintType");

                    b.Property<string>("Phone")
                        .HasMaxLength(10);

                    b.Property<string>("ResolvedById");

                    b.Property<int>("StatusId");

                    b.Property<string>("UniqueId");

                    b.Property<int>("VillageId");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClosedById");

                    b.HasIndex("ComplaintTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EscalatedById");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("IsComplainantAnonymousId");

                    b.HasIndex("IsComplainantBeneficiaryId");

                    b.HasIndex("ResolvedById");

                    b.HasIndex("StatusId");

                    b.HasIndex("VillageId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("MCHMIS.Models.ComplaintNote", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<string>("ComplaintId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ComplaintId");

                    b.HasIndex("CreatedById");

                    b.ToTable("ComplaintNotes");
                });

            modelBuilder.Entity("MCHMIS.Models.ComplaintsSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("HealthFacilityId");

                    b.Property<int>("OpenOutsideSLA");

                    b.Property<int>("OpenWithinSLA");

                    b.Property<int>("PeriodId");

                    b.Property<int>("ResolvedOutsideSLA");

                    b.Property<int>("ResolvedWithinSLA");

                    b.Property<int?>("WardId");

                    b.HasKey("Id");

                    b.ToTable("ComplaintsSummary");
                });

            modelBuilder.Entity("MCHMIS.Models.ComplaintStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ComplaintStatus");
                });

            modelBuilder.Entity("MCHMIS.Models.ComplaintType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Name");

                    b.Property<int>("SLAResolutionTime");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ComplaintTypes");
                });

            modelBuilder.Entity("MCHMIS.Models.Constituency", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("CountyId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.ToTable("Constituencies");
                });

            modelBuilder.Entity("MCHMIS.Models.County", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("GeoMasterId");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GeoMasterId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Counties");
                });

            modelBuilder.Entity("MCHMIS.Models.CutOff", b =>
                {
                    b.Property<int>("SubLocationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("SubLocationId1");

                    b.Property<decimal>("Value");

                    b.HasKey("SubLocationId");

                    b.HasIndex("SubLocationId1");

                    b.ToTable("CutOffs");
                });

            modelBuilder.Entity("MCHMIS.Models.CVList", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApprovalNotes");

                    b.Property<string>("ApprovedById");

                    b.Property<string>("CaptureNotes");

                    b.Property<int>("Captured");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateApproved");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int?>("HealthFacilityId");

                    b.Property<int>("Households");

                    b.Property<int?>("ListTypeId");

                    b.Property<string>("Notes");

                    b.Property<int>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("ListTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("CVLists");
                });

            modelBuilder.Entity("MCHMIS.Models.CVListDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionedById");

                    b.Property<int?>("ApprovalStatusId");

                    b.Property<string>("CVHouseHoldId");

                    b.Property<int?>("CannotFindHouseholdReasonId");

                    b.Property<DateTime?>("DateActioned");

                    b.Property<DateTime?>("DateSubmitedByCHV");

                    b.Property<int?>("EnumeratorId");

                    b.Property<string>("HouseholdId");

                    b.Property<int?>("InterviewResultId");

                    b.Property<int?>("InterviewStatusId");

                    b.Property<string>("ListId");

                    b.Property<string>("Notes");

                    b.Property<int?>("StatusId");

                    b.Property<string>("ValidationNotes");

                    b.Property<float?>("Variance");

                    b.Property<int?>("VarianceCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("ActionedById");

                    b.HasIndex("ApprovalStatusId");

                    b.HasIndex("CVHouseHoldId");

                    b.HasIndex("CannotFindHouseholdReasonId");

                    b.HasIndex("EnumeratorId");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("InterviewResultId");

                    b.HasIndex("InterviewStatusId");

                    b.HasIndex("ListId");

                    b.HasIndex("StatusId");

                    b.HasIndex("VarianceCategoryId");

                    b.ToTable("CVListDetails");
                });

            modelBuilder.Entity("MCHMIS.Models.Delivery", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BloodLossId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DeliveryDate");

                    b.Property<int?>("DeliveryModeId");

                    b.Property<int?>("HIVTestedId");

                    b.Property<int?>("MeconiumStainedLiquorId");

                    b.Property<string>("MotherClinicVisitId");

                    b.Property<string>("MotherCondition");

                    b.Property<DateTime?>("NextVisit");

                    b.Property<string>("Notes");

                    b.Property<int?>("ObstructedLabourId");

                    b.Property<int?>("PregnancyDuration");

                    b.Property<string>("PregnancyId");

                    b.Property<int?>("PregnancyOutcomeId");

                    b.Property<int?>("RescuscitationDoneId");

                    b.Property<int?>("SupportStatusId");

                    b.HasKey("Id");

                    b.HasIndex("BloodLossId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeliveryModeId");

                    b.HasIndex("HIVTestedId");

                    b.HasIndex("MeconiumStainedLiquorId");

                    b.HasIndex("MotherClinicVisitId");

                    b.HasIndex("ObstructedLabourId");

                    b.HasIndex("PregnancyId");

                    b.HasIndex("PregnancyOutcomeId");

                    b.HasIndex("RescuscitationDoneId");

                    b.HasIndex("SupportStatusId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("MCHMIS.Models.DevelopmentMilestone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LimitTag");

                    b.Property<string>("Name");

                    b.Property<string>("NormalLimits");

                    b.Property<int>("UpperLimit");

                    b.HasKey("Id");

                    b.ToTable("DevelopmentMilestones");
                });

            modelBuilder.Entity("MCHMIS.Models.District", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("ConstituencyId");

                    b.Property<int>("GeoMasterId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("ConstituencyId");

                    b.HasIndex("GeoMasterId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("MCHMIS.Models.Division", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("DistrictId");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("MCHMIS.Models.DrugsAdministered", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeliveryId");

                    b.Property<int>("DrugId");

                    b.Property<string>("RecipientId");

                    b.Property<int>("RecipientTypeId");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.ToTable("DrugsAdministered");
                });

            modelBuilder.Entity("MCHMIS.Models.EnrolmentSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Active");

                    b.Property<int>("Enrolled");

                    b.Property<int?>("HealthFacilityId");

                    b.Property<int>("Peak");

                    b.Property<int>("PeriodId");

                    b.Property<int>("Waiting");

                    b.Property<int?>("WardId");

                    b.HasKey("Id");

                    b.ToTable("EnrolmentSummary");
                });

            modelBuilder.Entity("MCHMIS.Models.Enumerator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime?>("ActivityDate");

                    b.Property<int?>("DeactivatedBy");

                    b.Property<DateTime?>("DeactivatedOn");

                    b.Property<string>("Email");

                    b.Property<int>("EnumeratorGroupId");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsLocked");

                    b.Property<DateTime?>("LoginDate");

                    b.Property<string>("MiddleName");

                    b.Property<string>("MobileNo");

                    b.Property<string>("NationalIdNo");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Surname");

                    b.Property<int?>("VillageId");

                    b.HasKey("Id");

                    b.HasIndex("EnumeratorGroupId");

                    b.HasIndex("VillageId");

                    b.ToTable("Enumerators");
                });

            modelBuilder.Entity("MCHMIS.Models.EnumeratorDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeviceId");

                    b.Property<string>("DeviceManufacturer");

                    b.Property<string>("DeviceModel");

                    b.Property<string>("DeviceName");

                    b.Property<int>("EnumeratorId");

                    b.Property<string>("Idiom");

                    b.Property<bool>("IsDevice");

                    b.Property<string>("Platform");

                    b.Property<string>("Version");

                    b.Property<string>("VersionNumber");

                    b.HasKey("Id");

                    b.ToTable("EnumeratorDevices");
                });

            modelBuilder.Entity("MCHMIS.Models.FamilyPlanning", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CaseManagementId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("NextVisit");

                    b.Property<string>("Notes");

                    b.Property<string>("PregnancyId");

                    b.Property<DateTime>("VisitDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PregnancyId");

                    b.ToTable("FamilyPlannings");
                });

            modelBuilder.Entity("MCHMIS.Models.FingerPrintVerification", b =>
                {
                    b.Property<string>("Id");

                    b.Property<DateTime>("VisitDate");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int>("HealthFacilityId");

                    b.Property<string>("HouseholdId")
                        .IsRequired();

                    b.Property<bool>("IsVerifying");

                    b.Property<string>("TypeId");

                    b.Property<bool>("Verified");

                    b.HasKey("Id", "VisitDate");

                    b.HasAlternateKey("HouseholdId", "Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("FingerPrintVerifications");
                });

            modelBuilder.Entity("MCHMIS.Models.FundRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<string>("ApprovedById");

                    b.Property<int>("Beneficiaries");

                    b.Property<string>("CreatedById");

                    b.Property<int>("CycleId");

                    b.Property<DateTime?>("DateApproved");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Notes");

                    b.Property<int>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CycleId");

                    b.HasIndex("StatusId");

                    b.ToTable("FundRequests");
                });

            modelBuilder.Entity("MCHMIS.Models.GeoMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsDefault");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("GeoMaster");
                });

            modelBuilder.Entity("MCHMIS.Models.HealthFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("SubCountyId");

                    b.HasKey("Id");

                    b.HasIndex("SubCountyId");

                    b.ToTable("HealthFacilities");
                });

            modelBuilder.Entity("MCHMIS.Models.HouseholdReg", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApprovedById");

                    b.Property<string>("BlackListReason");

                    b.Property<DateTime?>("CaptureEndDate");

                    b.Property<DateTime?>("CaptureStartDate");

                    b.Property<string>("CommonName");

                    b.Property<int?>("CommunityAreaId");

                    b.Property<int?>("CountyId");

                    b.Property<string>("CreatedById")
                        .IsRequired();

                    b.Property<DateTime?>("DateApproved");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("DeviceId");

                    b.Property<DateTime?>("DwellingStartDate");

                    b.Property<DateTime?>("EDD");

                    b.Property<int?>("EPM");

                    b.Property<float?>("Elevation");

                    b.Property<int?>("ExitReasonId");

                    b.Property<byte[]>("FingerPrint");

                    b.Property<int?>("Gravida");

                    b.Property<bool?>("HasProxy");

                    b.Property<int>("HealthFacilityId");

                    b.Property<int?>("IPRSExceptionId");

                    b.Property<bool?>("IPRSPassed");

                    b.Property<bool>("IPRSVerified");

                    b.Property<string>("Institution");

                    b.Property<decimal?>("LCS")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal?>("LCSFinal")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<DateTime?>("LMP");

                    b.Property<bool?>("LMPUnknown");

                    b.Property<float?>("Latitude");

                    b.Property<float?>("Longitude");

                    b.Property<string>("MotherId");

                    b.Property<string>("NHIFNo");

                    b.Property<string>("NOKFirstName");

                    b.Property<string>("NOKIdNumber");

                    b.Property<string>("NOKMiddleName");

                    b.Property<string>("NOKPhone")
                        .HasMaxLength(10);

                    b.Property<string>("NOKSurname");

                    b.Property<string>("NearestReligiousBuilding");

                    b.Property<string>("NearestSchool");

                    b.Property<string>("NomineeFirstName");

                    b.Property<string>("NomineeIdNumber");

                    b.Property<string>("NomineeMiddleName");

                    b.Property<string>("NomineeSurname");

                    b.Property<string>("OldUniqueId");

                    b.Property<int?>("OtherCountyId");

                    b.Property<bool>("OwnsPhone");

                    b.Property<decimal?>("PMTCutOffUsed");

                    b.Property<decimal?>("PMTScore")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal?>("PMTScoreFinal")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<string>("Para");

                    b.Property<string>("ParentId");

                    b.Property<string>("Parity");

                    b.Property<string>("Phone");

                    b.Property<string>("PhotoUrl");

                    b.Property<string>("PhysicalAddress");

                    b.Property<byte?>("ProgrammeId");

                    b.Property<byte[]>("RawFingerPrint");

                    b.Property<int?>("ReasonId");

                    b.Property<string>("RecipientNames");

                    b.Property<bool?>("RequiresHealthVerification");

                    b.Property<bool>("RequiresIPRSECheck");

                    b.Property<bool?>("RequiresMPESACheck");

                    b.Property<int?>("ResidenceDurationMonths");

                    b.Property<int?>("ResidenceDurationYears");

                    b.Property<string>("SerialNo");

                    b.Property<int>("StatusId");

                    b.Property<int?>("SubLocationId");

                    b.Property<string>("SupportingDocument");

                    b.Property<DateTime?>("SyncDate");

                    b.Property<string>("TempWard");

                    b.Property<int?>("TypeId");

                    b.Property<string>("UniqueId");

                    b.Property<bool>("VerifyingFingerPrint");

                    b.Property<string>("VersionId");

                    b.Property<int?>("VillageId");

                    b.Property<int?>("WardId");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CommunityAreaId");

                    b.HasIndex("CountyId");

                    b.HasIndex("ExitReasonId");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("IPRSExceptionId");

                    b.HasIndex("MotherId");

                    b.HasIndex("OtherCountyId");

                    b.HasIndex("ProgrammeId");

                    b.HasIndex("ReasonId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubLocationId");

                    b.HasIndex("VillageId");

                    b.HasIndex("WardId");

                    b.HasIndex("CreatedById", "CommunityAreaId", "VillageId", "StatusId", "HealthFacilityId", "IPRSExceptionId", "MotherId", "WardId");

                    b.ToTable("HouseholdRegs");
                });

            modelBuilder.Entity("MCHMIS.Models.HouseholdRegAsset", b =>
                {
                    b.Property<string>("HouseholdId");

                    b.Property<int>("AssetId");

                    b.Property<int>("AssetTypeId");

                    b.Property<bool?>("HasItem");

                    b.Property<int?>("ItemCount");

                    b.HasKey("HouseholdId", "AssetId");

                    b.HasAlternateKey("AssetId", "HouseholdId");

                    b.HasIndex("AssetTypeId");

                    b.ToTable("HouseholdRegAssets");
                });

            modelBuilder.Entity("MCHMIS.Models.HouseholdRegCharacteristic", b =>
                {
                    b.Property<string>("HouseholdId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BenefitFromFriendsRelativeId")
                        .IsRequired();

                    b.Property<int>("CookingFuelSourceId");

                    b.Property<string>("CookingFuelSourceOther");

                    b.Property<int>("Deaths");

                    b.Property<int>("FloorMaterialId");

                    b.Property<string>("FloorMaterialOther");

                    b.Property<int?>("HabitableRoomsNo");

                    b.Property<int>("HasBeenInMCHProgramId");

                    b.Property<int>("HasSkippedMealId");

                    b.Property<int>("HouseholdConditionId");

                    b.Property<bool>("IsOwnHouse");

                    b.Property<int?>("IsReceivingOtherBenefitId");

                    b.Property<bool>("IsRecievingNSNPBenefit");

                    b.Property<int>("LightingSourceId");

                    b.Property<string>("LightingSourceOther");

                    b.Property<int>("LiveBirths");

                    b.Property<string>("OtherProgrammes");

                    b.Property<decimal?>("OtherProgrammesBenefitAmount");

                    b.Property<int?>("OtherProgrammesBenefitTypeId");

                    b.Property<string>("OtherProgrammesInKindBenefit");

                    b.Property<int>("RoofMaterialId");

                    b.Property<string>("RoofMaterialOther");

                    b.Property<int?>("TenureOwnerOccupiedId")
                        .IsRequired();

                    b.Property<int>("TenureStatusId");

                    b.Property<string>("TenureStatusOther");

                    b.Property<int>("ToiletTypeId");

                    b.Property<string>("ToiletTypeOther");

                    b.Property<int>("UnitRiskId");

                    b.Property<string>("UnitRiskOther");

                    b.Property<int>("WallMaterialId");

                    b.Property<string>("WallMaterialOther");

                    b.Property<int>("WaterSourceId");

                    b.Property<string>("WaterSourceOther");

                    b.HasKey("HouseholdId");

                    b.HasIndex("BenefitFromFriendsRelativeId");

                    b.HasIndex("CookingFuelSourceId");

                    b.HasIndex("FloorMaterialId");

                    b.HasIndex("HasSkippedMealId");

                    b.HasIndex("HouseholdConditionId");

                    b.HasIndex("IsReceivingOtherBenefitId");

                    b.HasIndex("LightingSourceId");

                    b.HasIndex("OtherProgrammesBenefitTypeId");

                    b.HasIndex("RoofMaterialId");

                    b.HasIndex("TenureOwnerOccupiedId");

                    b.HasIndex("TenureStatusId");

                    b.HasIndex("ToiletTypeId");

                    b.HasIndex("UnitRiskId");

                    b.HasIndex("WallMaterialId");

                    b.HasIndex("WaterSourceId");

                    b.ToTable("HouseholdRegCharacteristics");
                });

            modelBuilder.Entity("MCHMIS.Models.HouseholdRegMember", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChronicIllnessId");

                    b.Property<DateTime>("CreateOn");

                    b.Property<DateTime?>("DOB");

                    b.Property<string>("DisabilityCaregiverId");

                    b.Property<int?>("DisabilityRequires24HrCareId");

                    b.Property<int?>("DisabilityTypeId");

                    b.Property<int?>("EducationAttendanceId");

                    b.Property<int?>("EducationLevelId");

                    b.Property<bool?>("ExternalMember");

                    b.Property<int?>("FatherAliveId");

                    b.Property<string>("FirstName");

                    b.Property<int?>("FormalJobTypeId");

                    b.Property<int?>("GenderId");

                    b.Property<string>("HouseholdId");

                    b.Property<string>("IdNumber");

                    b.Property<int?>("IdentificationFormId");

                    b.Property<int?>("IllnessTypeId");

                    b.Property<decimal?>("MUAC");

                    b.Property<int?>("MainCaregiverId");

                    b.Property<int?>("MaritalStatusId");

                    b.Property<string>("MiddleName");

                    b.Property<int?>("MotherAliveId");

                    b.Property<int?>("OccupationTypeId");

                    b.Property<int?>("OrphanhoodTypeId");

                    b.Property<int?>("RelationshipId");

                    b.Property<int?>("SchoolTypeId");

                    b.Property<int?>("SpouseInHouseholdId");

                    b.Property<string>("SupportStatusId");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.HasIndex("ChronicIllnessId");

                    b.HasIndex("DisabilityCaregiverId");

                    b.HasIndex("DisabilityRequires24HrCareId");

                    b.HasIndex("DisabilityTypeId");

                    b.HasIndex("EducationAttendanceId");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("FatherAliveId");

                    b.HasIndex("FormalJobTypeId");

                    b.HasIndex("GenderId");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("IdentificationFormId");

                    b.HasIndex("IllnessTypeId");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("MotherAliveId");

                    b.HasIndex("OccupationTypeId");

                    b.HasIndex("OrphanhoodTypeId");

                    b.HasIndex("RelationshipId");

                    b.HasIndex("SchoolTypeId");

                    b.HasIndex("SpouseInHouseholdId");

                    b.ToTable("HouseholdRegMembers");
                });

            modelBuilder.Entity("MCHMIS.Models.HouseholdRegMemberDisability", b =>
                {
                    b.Property<string>("HouseholdRegMemberId");

                    b.Property<int>("DisabilityId");

                    b.HasKey("HouseholdRegMemberId", "DisabilityId");

                    b.HasAlternateKey("DisabilityId", "HouseholdRegMemberId");

                    b.ToTable("HouseholdRegMemberDisabilities");
                });

            modelBuilder.Entity("MCHMIS.Models.HouseholdRegOtherProgramme", b =>
                {
                    b.Property<string>("HouseholdId");

                    b.Property<int>("OtherProgrammeId");

                    b.HasKey("HouseholdId", "OtherProgrammeId");

                    b.HasIndex("OtherProgrammeId");

                    b.ToTable("HouseholdRegOtherProgrammes");
                });

            modelBuilder.Entity("MCHMIS.Models.InstallationSetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HealthFacilityId");

                    b.HasKey("Id");

                    b.HasIndex("HealthFacilityId");

                    b.ToTable("InstallationSetup");
                });

            modelBuilder.Entity("MCHMIS.Models.KakamegaVillage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<string>("Ward");

                    b.HasKey("Id");

                    b.ToTable("KakamegaVillages");
                });

            modelBuilder.Entity("MCHMIS.Models.KeyMilestone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClinicVisitId");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.HasIndex("ClinicVisitId");

                    b.ToTable("KeyMilestones");
                });

            modelBuilder.Entity("MCHMIS.Models.Location", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("DivisionId");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DivisionId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("MCHMIS.Models.MailSetting", b =>
                {
                    b.Property<string>("SMTPServerAddress")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SMTPServerPassword");

                    b.Property<int>("SMTPServerPort");

                    b.Property<string>("SMTPServerUserName");

                    b.Property<string>("SenderEmailAddress");

                    b.Property<string>("SenderName");

                    b.HasKey("SMTPServerAddress");

                    b.ToTable("MailSettings");
                });

            modelBuilder.Entity("MCHMIS.Models.MotherClinicVisit", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CaseManagementId");

                    b.Property<int?>("ClinicVisitId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DueDate");

                    b.Property<int?>("HealthFacilityId");

                    b.Property<string>("HouseholdId");

                    b.Property<bool>("IsVerifying");

                    b.Property<string>("PregnancyId");

                    b.Property<bool>("RequiresFingerPrint");

                    b.Property<int>("TypeId");

                    b.Property<bool>("Verified");

                    b.Property<DateTime?>("VisitDate");

                    b.HasKey("Id");

                    b.HasIndex("CaseManagementId");

                    b.HasIndex("ClinicVisitId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PregnancyId");

                    b.ToTable("MotherClinicVisits");
                });

            modelBuilder.Entity("MCHMIS.Models.MotherPreventiveService", b =>
                {
                    b.Property<string>("PregnancyDataId");

                    b.Property<int>("PreventiveServiceId");

                    b.HasKey("PregnancyDataId", "PreventiveServiceId");

                    b.HasIndex("PreventiveServiceId");

                    b.ToTable("MotherPreventiveServices");
                });

            modelBuilder.Entity("MCHMIS.Models.MpesaAuthorizationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("UtcDateTime");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("MpesaAuthorizationCode");
                });

            modelBuilder.Entity("MCHMIS.Models.Notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Description");

                    b.Property<string>("HouseholdId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("HouseholdId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("MCHMIS.Models.NotesCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("NotesCategories");
                });

            modelBuilder.Entity("MCHMIS.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<string>("BeneficiaryId");

                    b.Property<string>("BeneficiaryName");

                    b.Property<int>("CycleId");

                    b.Property<string>("FailureReason");

                    b.Property<int>("FundRequestId");

                    b.Property<int>("HealthFacilityId");

                    b.Property<string>("IdNumber");

                    b.Property<DateTime?>("PaymentDate");

                    b.Property<string>("PaymentErrorMessage");

                    b.Property<int>("PayrollId");

                    b.Property<string>("ReceiverPartyPublicName");

                    b.Property<string>("RecipientName");

                    b.Property<string>("RecipientPhone");

                    b.Property<bool>("Reconciled");

                    b.Property<int>("StatusId");

                    b.Property<int?>("SubCountyId");

                    b.Property<string>("TransactionId");

                    b.Property<string>("TransactionReceipt");

                    b.Property<int?>("VillageId");

                    b.Property<int?>("WardId");

                    b.HasKey("Id");

                    b.HasIndex("BeneficiaryId");

                    b.HasIndex("CycleId");

                    b.HasIndex("FundRequestId");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubCountyId");

                    b.HasIndex("VillageId");

                    b.HasIndex("WardId");

                    b.HasIndex("PayrollId", "CycleId", "BeneficiaryId", "StatusId", "HealthFacilityId", "VillageId", "WardId", "SubCountyId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MCHMIS.Models.PaymentCycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Closed");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("PaymentCycles");
                });

            modelBuilder.Entity("MCHMIS.Models.PaymentPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PaymentPoints");
                });

            modelBuilder.Entity("MCHMIS.Models.PaymentsSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Benevolent");

                    b.Property<int?>("HealthFacilityId");

                    b.Property<int>("IndicatorId");

                    b.Property<int>("PeriodId");

                    b.Property<int>("Stage1");

                    b.Property<int>("Stage2");

                    b.Property<int>("Stage3");

                    b.Property<int>("Stage4");

                    b.Property<int>("Stage5");

                    b.Property<int>("Stage6");

                    b.Property<int?>("WardId");

                    b.HasKey("Id");

                    b.ToTable("PaymentsSummary");
                });

            modelBuilder.Entity("MCHMIS.Models.PaymentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PaymentStatus");
                });

            modelBuilder.Entity("MCHMIS.Models.PaymentTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<string>("BeneficiaryId");

                    b.Property<string>("BeneficiaryName");

                    b.Property<int?>("BeneficiaryPaymentPointId");

                    b.Property<int>("FundRequestId");

                    b.Property<int>("HealthFacilityId");

                    b.Property<string>("IdNumber");

                    b.Property<int>("PaymentPointId");

                    b.Property<string>("RecipientName");

                    b.Property<string>("RecipientPhone");

                    b.Property<int?>("StatusId");

                    b.Property<int?>("SubCountyId");

                    b.Property<int?>("VillageId");

                    b.Property<int?>("WardId");

                    b.HasKey("Id");

                    b.HasIndex("BeneficiaryId");

                    b.HasIndex("FundRequestId");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("PaymentPointId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubCountyId");

                    b.HasIndex("VillageId");

                    b.HasIndex("WardId");

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("MCHMIS.Models.Payroll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<string>("ApprovedById");

                    b.Property<int>("Beneficiaries");

                    b.Property<string>("CreatedById");

                    b.Property<int>("CycleId");

                    b.Property<DateTime?>("DateApproved");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateReconciled");

                    b.Property<int>("FundRequestId");

                    b.Property<string>("Notes");

                    b.Property<bool>("Reconciled");

                    b.Property<string>("ReconciledById");

                    b.Property<string>("ReconciliationApprovedById");

                    b.Property<DateTime?>("ReconciliationDateApproved");

                    b.Property<string>("ReconciliationNotes");

                    b.Property<int?>("ReconciliationStatusId");

                    b.Property<int>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CycleId");

                    b.HasIndex("FundRequestId");

                    b.HasIndex("ReconciledById");

                    b.HasIndex("ReconciliationApprovedById");

                    b.HasIndex("ReconciliationStatusId");

                    b.HasIndex("StatusId");

                    b.ToTable("Payrolls");
                });

            modelBuilder.Entity("MCHMIS.Models.PayrollException", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExceptionTypeId");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.HasIndex("ExceptionTypeId");

                    b.ToTable("PayrollExceptions");
                });

            modelBuilder.Entity("MCHMIS.Models.PayrollExceptionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PayrollExceptionTypes");
                });

            modelBuilder.Entity("MCHMIS.Models.PMT_Household", b =>
                {
                    b.Property<string>("HouseholdId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FinalProgramme");

                    b.Property<bool?>("HSNP");

                    b.Property<string>("Household_Group");

                    b.Property<string>("Household_Rank");

                    b.Property<decimal?>("LCS");

                    b.Property<bool?>("MultipleVulnerability");

                    b.Property<bool?>("OP");

                    b.Property<string>("OP_Member");

                    b.Property<bool?>("OVC");

                    b.Property<string>("OVC_Member");

                    b.Property<decimal?>("PMT_AGRIWORKERSSUBLOCATION");

                    b.Property<decimal?>("PMT_BIRTHINHOUSEHOLD");

                    b.Property<decimal?>("PMT_BIRTHRATESUBLOCATION");

                    b.Property<decimal?>("PMT_CAMELS");

                    b.Property<decimal?>("PMT_CAR");

                    b.Property<decimal?>("PMT_CHILDRENUNDER6");

                    b.Property<decimal?>("PMT_COOK");

                    b.Property<decimal?>("PMT_CentralRift");

                    b.Property<decimal?>("PMT_Coastal");

                    b.Property<decimal?>("PMT_DEATHINHOUSEHOLD");

                    b.Property<decimal?>("PMT_DEATHRATESUBLOCATION");

                    b.Property<decimal?>("PMT_DEPENDANCY");

                    b.Property<decimal?>("PMT_DISABLED15TO65");

                    b.Property<decimal?>("PMT_DONKEYS");

                    b.Property<decimal?>("PMT_Dwelling");

                    b.Property<decimal?>("PMT_ELEVATIONSUBLOCATION");

                    b.Property<decimal?>("PMT_EXOTIC");

                    b.Property<decimal?>("PMT_FLOOR");

                    b.Property<decimal?>("PMT_GOATS");

                    b.Property<decimal?>("PMT_HEADAGE");

                    b.Property<decimal?>("PMT_HEADEDUCATION");

                    b.Property<decimal?>("PMT_HEADWORK");

                    b.Property<decimal?>("PMT_HHMemberSize");

                    b.Property<decimal?>("PMT_HHRoomsPerPersons");

                    b.Property<decimal?>("PMT_LIGHT");

                    b.Property<decimal?>("PMT_LowerEastern");

                    b.Property<decimal?>("PMT_MALEHEAD");

                    b.Property<decimal?>("PMT_MALEMEMBERS");

                    b.Property<decimal?>("PMT_MAXHOUSEHOLDEDUCATION");

                    b.Property<decimal?>("PMT_MEANHOUSEHOLDAGE");

                    b.Property<decimal?>("PMT_MONOGAMOUS");

                    b.Property<decimal?>("PMT_MOTORCYCLE");

                    b.Property<decimal?>("PMT_NorthEastern");

                    b.Property<decimal?>("PMT_NorthRift");

                    b.Property<decimal?>("PMT_Nyanza");

                    b.Property<decimal?>("PMT_ORPHAN");

                    b.Property<decimal?>("PMT_POPULATIONSUBLOCATION");

                    b.Property<decimal?>("PMT_PRECIPITATIONSUBLOCATION");

                    b.Property<decimal?>("PMT_REFRIGERATOR");

                    b.Property<decimal?>("PMT_ROOF");

                    b.Property<decimal?>("PMT_SCORE");

                    b.Property<decimal?>("PMT_SELFEMPLOYEDSUBLOCATION");

                    b.Property<decimal?>("PMT_SHEEP");

                    b.Property<decimal?>("PMT_SPOUSE");

                    b.Property<decimal?>("PMT_SPOUSEAGE");

                    b.Property<decimal?>("PMT_SPOUSEEDUCATION");

                    b.Property<decimal?>("PMT_SPOUSEWORK");

                    b.Property<decimal?>("PMT_TOILET");

                    b.Property<decimal?>("PMT_TUKTUK");

                    b.Property<decimal?>("PMT_TV");

                    b.Property<decimal?>("PMT_UNDER12SCHOOL");

                    b.Property<decimal?>("PMT_UpperEastern");

                    b.Property<decimal?>("PMT_WAGEWORKERSSUBLOCATION");

                    b.Property<decimal?>("PMT_WATER");

                    b.Property<decimal?>("PMT_WORKING15TO65");

                    b.Property<decimal?>("PMT_WORKING6TO15");

                    b.Property<decimal?>("PMT_Wall");

                    b.Property<decimal?>("PMT_Western");

                    b.Property<decimal?>("PMT_ZEBU");

                    b.Property<bool?>("PWSD");

                    b.Property<string>("PWSD_Member");

                    b.HasKey("HouseholdId");

                    b.ToTable("PMT_Household");
                });

            modelBuilder.Entity("MCHMIS.Models.PMT_Rural", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SubLocVar");

                    b.Property<string>("Subloc");

                    b.Property<float?>("cont_Mean_elev");

                    b.Property<float?>("cont_Mean_precip");

                    b.Property<float?>("cont_birthsrate");

                    b.Property<float?>("cont_deathsrate");

                    b.Property<float?>("cont_population");

                    b.Property<float?>("cont_selfemp_subloc");

                    b.Property<float?>("cont_work_agrs");

                    b.Property<float?>("cont_work_subloc");

                    b.Property<float?>("region_Central");

                    b.Property<float?>("region_Central_Rift");

                    b.Property<float?>("region_Coastal");

                    b.Property<float?>("region_Lower_Eastern");

                    b.Property<float?>("region_Mid_Eastern");

                    b.Property<float?>("region_Mombasa");

                    b.Property<float?>("region_Nairobi");

                    b.Property<float?>("region_North_Eastern");

                    b.Property<float?>("region_North_Rift");

                    b.Property<float?>("region_Nyanza");

                    b.Property<float?>("region_South_Rift");

                    b.Property<float?>("region_Upper_Eastern");

                    b.Property<float?>("region_Western");

                    b.HasKey("Id");

                    b.ToTable("PMT_Rural");
                });

            modelBuilder.Entity("MCHMIS.Models.PMT_Urban", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SubLocVar");

                    b.Property<string>("Subloc");

                    b.Property<float?>("cont_Mean_elev");

                    b.Property<float?>("cont_Mean_precip");

                    b.Property<float?>("cont_birthsrate");

                    b.Property<float?>("cont_deathsrate");

                    b.Property<float?>("cont_population");

                    b.Property<float?>("cont_selfemp_subloc");

                    b.Property<float?>("cont_work_agrs");

                    b.Property<float?>("cont_work_subloc");

                    b.Property<float?>("region_Central");

                    b.Property<float?>("region_Central_Rift");

                    b.Property<float?>("region_Coastal");

                    b.Property<float?>("region_Lower_Eastern");

                    b.Property<float?>("region_Mid_Eastern");

                    b.Property<float?>("region_Mombasa");

                    b.Property<float?>("region_Nairobi");

                    b.Property<float?>("region_North_Eastern");

                    b.Property<float?>("region_North_Rift");

                    b.Property<float?>("region_Nyanza");

                    b.Property<float?>("region_South_Rift");

                    b.Property<float?>("region_Upper_Eastern");

                    b.Property<float?>("region_Western");

                    b.HasKey("Id");

                    b.ToTable("PMT_Urban");
                });

            modelBuilder.Entity("MCHMIS.Models.PMTCTIntervention", b =>
                {
                    b.Property<string>("PMTCTServiceId");

                    b.Property<int>("InterventionId");

                    b.HasKey("PMTCTServiceId", "InterventionId");

                    b.HasAlternateKey("InterventionId", "PMTCTServiceId");

                    b.ToTable("PMTCTInterventions");
                });

            modelBuilder.Entity("MCHMIS.Models.PMTCTService", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CaseManagementId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateGiven");

                    b.Property<string>("PregnancyId");

                    b.Property<int>("RecipientTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PregnancyId");

                    b.ToTable("PMTCTServices");
                });

            modelBuilder.Entity("MCHMIS.Models.PMTCutOff", b =>
                {
                    b.Property<int>("PMTModelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("KES");

                    b.Property<float>("LogScale");

                    b.Property<float>("USD");

                    b.HasKey("PMTModelId");

                    b.ToTable("PMTCutOffs");
                });

            modelBuilder.Entity("MCHMIS.Models.PMTScore", b =>
                {
                    b.Property<string>("HouseholdId");

                    b.Property<int>("ConstantId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int?>("LocalityId");

                    b.Property<float>("Score");

                    b.HasKey("HouseholdId");

                    b.HasIndex("ConstantId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LocalityId");

                    b.ToTable("PMTScores");
                });

            modelBuilder.Entity("MCHMIS.Models.PMTWeight", b =>
                {
                    b.Property<int>("ConstantId");

                    b.Property<int>("LocalityId");

                    b.Property<float>("Weight");

                    b.HasKey("ConstantId", "LocalityId");

                    b.HasIndex("LocalityId");

                    b.ToTable("PMTWeights");
                });

            modelBuilder.Entity("MCHMIS.Models.PostNatalExamination", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BloodPressure");

                    b.Property<string>("CaseManagementId");

                    b.Property<int>("ClinicVisitId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int?>("FPCounselingId");

                    b.Property<int?>("FPMethodId");

                    b.Property<string>("GeneralCondition");

                    b.Property<string>("MotherClinicVisitId");

                    b.Property<DateTime?>("NextDate");

                    b.Property<string>("Notes");

                    b.Property<string>("PregnancyId");

                    b.Property<int?>("SupportStatusId");

                    b.Property<DateTime>("VisitDate");

                    b.HasKey("Id");

                    b.HasIndex("ClinicVisitId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FPCounselingId");

                    b.HasIndex("FPMethodId");

                    b.HasIndex("MotherClinicVisitId");

                    b.HasIndex("PregnancyId");

                    b.HasIndex("SupportStatusId");

                    b.ToTable("PostNatalExaminations");
                });

            modelBuilder.Entity("MCHMIS.Models.PostNatalExaminationDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ARTProphylaxisGivenId");

                    b.Property<string>("BabyGeneralCondition");

                    b.Property<int?>("CPInitiatedId");

                    b.Property<string>("ChildId");

                    b.Property<int>("FeedingMethodId");

                    b.Property<int?>("ImmunizationStartedId");

                    b.Property<string>("PostNatalExaminationId");

                    b.HasKey("Id");

                    b.HasIndex("ARTProphylaxisGivenId");

                    b.HasIndex("CPInitiatedId");

                    b.HasIndex("ChildId");

                    b.HasIndex("FeedingMethodId");

                    b.HasIndex("ImmunizationStartedId");

                    b.HasIndex("PostNatalExaminationId");

                    b.ToTable("PostNatalExaminationDetails");
                });

            modelBuilder.Entity("MCHMIS.Models.PostNatalMilestone", b =>
                {
                    b.Property<string>("PostNatalExaminationDetailId");

                    b.Property<int>("KeyMilestoneId");

                    b.HasKey("PostNatalExaminationDetailId", "KeyMilestoneId");

                    b.HasAlternateKey("KeyMilestoneId", "PostNatalExaminationDetailId");

                    b.ToTable("PostNatalMilestones");
                });

            modelBuilder.Entity("MCHMIS.Models.Pregnancy", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BloodGroupId");

                    b.Property<int?>("BreastfeedingCounselingDoneId");

                    b.Property<string>("CaseManagementId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateExited");

                    b.Property<DateTime?>("DateModified");

                    b.Property<DateTime?>("EDD");

                    b.Property<int?>("EPM");

                    b.Property<int?>("InfantFeedingCounselingDoneId");

                    b.Property<DateTime?>("LMP");

                    b.Property<bool?>("LMPUnknown");

                    b.Property<DateTime?>("LastVisit");

                    b.Property<int>("MissedVisits");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("NextVisit");

                    b.Property<int?>("NextVisitClinicId");

                    b.Property<int?>("PregnancyNo");

                    b.Property<int?>("ReasonId");

                    b.Property<int?>("RhesusId");

                    b.Property<int?>("StatusId");

                    b.Property<int?>("SupportStatusId");

                    b.HasKey("Id");

                    b.HasIndex("BloodGroupId");

                    b.HasIndex("BreastfeedingCounselingDoneId");

                    b.HasIndex("CaseManagementId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InfantFeedingCounselingDoneId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ReasonId");

                    b.HasIndex("RhesusId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupportStatusId");

                    b.ToTable("Pregnancies");
                });

            modelBuilder.Entity("MCHMIS.Models.PregnancyData", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BloodPressure");

                    b.Property<int?>("ClinicVisitId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("HouseholdId");

                    b.Property<string>("MotherClinicVisitId");

                    b.Property<DateTime?>("NextVisit")
                        .IsRequired();

                    b.Property<string>("Notes");

                    b.Property<string>("PregnancyId");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<decimal?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("ClinicVisitId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MotherClinicVisitId");

                    b.HasIndex("PregnancyId");

                    b.ToTable("PregnancyData");
                });

            modelBuilder.Entity("MCHMIS.Models.PrePayrollAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanProceed");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PrePayrollActions");
                });

            modelBuilder.Entity("MCHMIS.Models.PrePayrollCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApprovedById");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateApproved");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int?>("DuplicateIds");

                    b.Property<int?>("DuplicatePhoneNumbers");

                    b.Property<decimal>("ExpectedAmount");

                    b.Property<bool>("Imported");

                    b.Property<string>("Notes");

                    b.Property<int>("PaymentCycleId");

                    b.Property<int?>("PhoneNumberIssues");

                    b.Property<int?>("RecipientChange");

                    b.Property<int>("StatusId");

                    b.Property<int?>("UnusualAmounts");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PaymentCycleId");

                    b.HasIndex("StatusId");

                    b.ToTable("PrePayrollChecks");
                });

            modelBuilder.Entity("MCHMIS.Models.PrePayrollChecksDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActionId");

                    b.Property<decimal?>("Amount");

                    b.Property<string>("ApprovedById");

                    b.Property<string>("BeneficiaryId");

                    b.Property<string>("CustomerName");

                    b.Property<string>("CustomerType");

                    b.Property<DateTime?>("DateApproved");

                    b.Property<int>("ExceptionId");

                    b.Property<string>("Notes");

                    b.Property<int?>("PaymentId");

                    b.Property<int>("PrePayrollCheckId");

                    b.Property<string>("RecipientName");

                    b.Property<string>("RecipientPhone");

                    b.Property<int?>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("BeneficiaryId");

                    b.HasIndex("ExceptionId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PrePayrollCheckId");

                    b.HasIndex("StatusId");

                    b.ToTable("PrePayrollChecksDetails");
                });

            modelBuilder.Entity("MCHMIS.Models.PrePayrollTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BeneficiaryId");

                    b.Property<int>("PaymentPointId");

                    b.Property<int>("PrePayrollCheckId");

                    b.HasKey("Id");

                    b.HasIndex("PaymentPointId");

                    b.ToTable("PrePayrollTransactions");
                });

            modelBuilder.Entity("MCHMIS.Models.Programme", b =>
                {
                    b.Property<byte>("Id");

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Programmes");
                });

            modelBuilder.Entity("MCHMIS.Models.Reason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Reasons");
                });

            modelBuilder.Entity("MCHMIS.Models.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("FingerPrint");

                    b.Property<string>("FirstName");

                    b.Property<string>("GuardianPhone");

                    b.Property<int>("IdentificationFormId");

                    b.Property<string>("Institution");

                    b.Property<string>("Landmark");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<bool>("Over18");

                    b.Property<string>("Phone");

                    b.Property<bool>("VerifyingFingerPrint");

                    b.Property<int>("WardId");

                    b.HasKey("Id");

                    b.ToTable("Registration");
                });

            modelBuilder.Entity("MCHMIS.Models.RegistrationSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Eligible");

                    b.Property<int?>("HealthFacilityId");

                    b.Property<int>("Ineligible");

                    b.Property<int>("PeriodId");

                    b.Property<int>("Registered");

                    b.Property<int?>("WardId");

                    b.HasKey("Id");

                    b.ToTable("RegistrationSummary");
                });

            modelBuilder.Entity("MCHMIS.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Keyword");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<int>("ReportCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("ReportCategoryId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("MCHMIS.Models.ReportCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ReportCategories");
                });

            modelBuilder.Entity("MCHMIS.Models.ReportingPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("ReportingPeriods");
                });

            modelBuilder.Entity("MCHMIS.Models.ReportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ReportTypes");
                });

            modelBuilder.Entity("MCHMIS.Models.RoleProfile", b =>
                {
                    b.Property<int>("TaskId");

                    b.Property<string>("RoleId");

                    b.HasKey("TaskId", "RoleId");

                    b.HasAlternateKey("RoleId", "TaskId");

                    b.ToTable("RoleProfiles");
                });

            modelBuilder.Entity("MCHMIS.Models.Scoring_Coef", b =>
                {
                    b.Property<string>("ItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<float?>("Coefficient");

                    b.Property<float?>("Coefficient1");

                    b.Property<float?>("Coefficient2");

                    b.Property<string>("F13");

                    b.Property<string>("F14");

                    b.Property<string>("F15");

                    b.Property<float?>("Mean");

                    b.Property<float?>("Mean1");

                    b.Property<float?>("Mean2");

                    b.Property<string>("Region_Rural");

                    b.Property<string>("Region_Urban");

                    b.Property<float?>("StdDev");

                    b.Property<float?>("StdDev1");

                    b.Property<float?>("StdDev2");

                    b.HasKey("ItemId");

                    b.ToTable("Scoring_Coef");
                });

            modelBuilder.Entity("MCHMIS.Models.SMS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClinicVisitId");

                    b.Property<string>("Message");

                    b.Property<int>("Order");

                    b.Property<string>("TriggerEvent");

                    b.HasKey("Id");

                    b.HasIndex("ClinicVisitId");

                    b.ToTable("SMS");
                });

            modelBuilder.Entity("MCHMIS.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("MCHMIS.Models.SubCounty", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("CountyId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.ToTable("SubCounties");
                });

            modelBuilder.Entity("MCHMIS.Models.SubLocation", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("LocationId");

                    b.Property<string>("ModifiedById");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("RuralUrban");

                    b.Property<int?>("WardId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LocationId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("SubLocations");
                });

            modelBuilder.Entity("MCHMIS.Models.SystemCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<int?>("SystemModuleId");

                    b.HasKey("Id");

                    b.HasIndex("SystemModuleId");

                    b.ToTable("SystemCodes");
                });

            modelBuilder.Entity("MCHMIS.Models.SystemCodeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<decimal?>("OrderNo")
                        .IsRequired();

                    b.Property<int>("SystemCodeId");

                    b.HasKey("Id");

                    b.HasIndex("SystemCodeId");

                    b.ToTable("SystemCodeDetails");
                });

            modelBuilder.Entity("MCHMIS.Models.SystemModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SystemModules");
                });

            modelBuilder.Entity("MCHMIS.Models.SystemSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .IsRequired();

                    b.Property<string>("key")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("MCHMIS.Models.SystemTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int?>("Order");

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("SystemTasks");
                });

            modelBuilder.Entity("MCHMIS.Models.Village", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("SubLocationId");

                    b.Property<int>("WardId");

                    b.HasKey("Id");

                    b.HasIndex("SubLocationId");

                    b.HasIndex("WardId");

                    b.ToTable("Villages");
                });

            modelBuilder.Entity("MCHMIS.Models.Ward", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("ConstituencyId");

                    b.Property<string>("Name");

                    b.Property<int?>("SubCountyId");

                    b.HasKey("Id");

                    b.HasIndex("ConstituencyId");

                    b.HasIndex("SubCountyId");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("MCHMIS.ViewModels.MPesaFeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PaymentId");

                    b.Property<string>("Result");

                    b.HasKey("Id");

                    b.ToTable("MPesaFeedBack");
                });

            modelBuilder.Entity("MCHMIS.ViewModels.TempTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Col1");

                    b.Property<string>("Col2");

                    b.Property<string>("Col3");

                    b.HasKey("Id");

                    b.ToTable("TempTable");
                });

            modelBuilder.Entity("MCHMIS.ViewModels.TestData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("TestData");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Enrolment", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "ImportApprovedBy")
                        .WithMany()
                        .HasForeignKey("ImportApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApprovalStatus", "ImportStatus")
                        .WithMany()
                        .HasForeignKey("ImportStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "ImportedBy")
                        .WithMany()
                        .HasForeignKey("ImportedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApprovalStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EnrolmentDetail", b =>
                {
                    b.HasOne("Enrolment", "Enrolment")
                        .WithMany()
                        .HasForeignKey("EnrolmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HouseholdReg", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.ApplicationUser", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SubCounty", "SubCounty")
                        .WithMany()
                        .HasForeignKey("SubCountyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.AuditTrail", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.Beneficiary", b =>
                {
                    b.HasOne("MCHMIS.Models.CommunityArea", "CommunityArea")
                        .WithMany()
                        .HasForeignKey("CommunityAreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Enrolment", "Enrolment")
                        .WithMany()
                        .HasForeignKey("EnrolmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HouseholdReg", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "IdentificationForm")
                        .WithMany()
                        .HasForeignKey("IdentificationFormId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HouseholdRegMember", "Mother")
                        .WithMany()
                        .HasForeignKey("MotherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Village", "Village")
                        .WithMany()
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.BeneficiaryPaymentPoint", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HouseholdReg", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.PaymentPoint", "PaymentPoint")
                        .WithMany()
                        .HasForeignKey("PaymentPointId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.PaymentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.CaseManagement", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HouseholdReg", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Reason", "Reason")
                        .WithMany()
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.CaseManagementStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.Change", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser", "ActionedBy")
                        .WithMany()
                        .HasForeignKey("ActionedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "ChangeType")
                        .WithMany()
                        .HasForeignKey("ChangeTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Child", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HealthFacility", "CurrentHealthFacility")
                        .WithMany()
                        .HasForeignKey("CurrentHealthFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HealthFacility", "DestinationHealthFacility")
                        .WithMany()
                        .HasForeignKey("DestinationHealthFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HouseholdReg", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Status", "MPESACheckStatus")
                        .WithMany()
                        .HasForeignKey("MPESACheckStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApprovalStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.ChangeNote", b =>
                {
                    b.HasOne("MCHMIS.Models.Change")
                        .WithMany("ChangeNotes")
                        .HasForeignKey("ChangeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.Child", b =>
                {
                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "DeliveryAssistant")
                        .WithMany()
                        .HasForeignKey("DeliveryAssistantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HealthFacility", "DeliveryHealthFacility")
                        .WithMany()
                        .HasForeignKey("DeliveryHealthFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Delivery", "Delivery")
                        .WithMany()
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "DeliveryPlace")
                        .WithMany()
                        .HasForeignKey("DeliveryPlaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "Immunized")
                        .WithMany()
                        .HasForeignKey("ImmunizedId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.ChildFeedingInformation", b =>
                {
                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "Breastfeeding")
                        .WithMany()
                        .HasForeignKey("BreastfeedingId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "ComplimentaryFoodIntroduced")
                        .WithMany()
                        .HasForeignKey("ComplimentaryFoodIntroducedId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "OtherFoodIntroduced")
                        .WithMany()
                        .HasForeignKey("OtherFoodIntroducedId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.ChildHealthRecord", b =>
                {
                    b.HasOne("MCHMIS.Models.Child")
                        .WithOne("ChildHealthRecord")
                        .HasForeignKey("MCHMIS.Models.ChildHealthRecord", "ChildId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "DeliveryPlace")
                        .WithMany()
                        .HasForeignKey("DeliveryPlaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.CivilRegistration", b =>
                {
                    b.HasOne("MCHMIS.Models.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.ClinicVisit", b =>
                {
                    b.HasOne("MCHMIS.Models.PaymentPoint", "PaymentPoint")
                        .WithMany()
                        .HasForeignKey("PaymentPointId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "VisitType")
                        .WithMany()
                        .HasForeignKey("VisitTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.CommunityArea", b =>
                {
                    b.HasOne("MCHMIS.Models.Village", "Village")
                        .WithMany()
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.Complaint", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "ClosedBy")
                        .WithMany()
                        .HasForeignKey("ClosedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ComplaintType", "ComplaintType")
                        .WithMany()
                        .HasForeignKey("ComplaintTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "EscalatedBy")
                        .WithMany()
                        .HasForeignKey("EscalatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "IsComplainantAnonymous")
                        .WithMany()
                        .HasForeignKey("IsComplainantAnonymousId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "IsComplainantBeneficiary")
                        .WithMany()
                        .HasForeignKey("IsComplainantBeneficiaryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "ResolvedBy")
                        .WithMany()
                        .HasForeignKey("ResolvedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ComplaintStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Village", "Village")
                        .WithMany()
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.ComplaintNote", b =>
                {
                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Complaint")
                        .WithMany("ComplaintNotes")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.ComplaintType", b =>
                {
                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.Constituency", b =>
                {
                    b.HasOne("MCHMIS.Models.County", "County")
                        .WithMany("Constituencies")
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.County", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.GeoMaster", "GeoMaster")
                        .WithMany("Counties")
                        .HasForeignKey("GeoMasterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.CutOff", b =>
                {
                    b.HasOne("MCHMIS.Models.SubLocation", "SubLocation")
                        .WithMany()
                        .HasForeignKey("SubLocationId1")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.CVList", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "ListType")
                        .WithMany()
                        .HasForeignKey("ListTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApprovalStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.CVListDetail", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser", "ActionedBy")
                        .WithMany()
                        .HasForeignKey("ActionedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApprovalStatus", "ApprovalStatus")
                        .WithMany()
                        .HasForeignKey("ApprovalStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HouseholdReg", "CVHouseHold")
                        .WithMany()
                        .HasForeignKey("CVHouseHoldId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "CannotFindHouseholdReason")
                        .WithMany()
                        .HasForeignKey("CannotFindHouseholdReasonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Enumerator", "Enumerator")
                        .WithMany()
                        .HasForeignKey("EnumeratorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HouseholdReg", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "InterviewResult")
                        .WithMany()
                        .HasForeignKey("InterviewResultId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "InterviewStatus")
                        .WithMany()
                        .HasForeignKey("InterviewStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.CVList", "List")
                        .WithMany()
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "VarianceCategory")
                        .WithMany()
                        .HasForeignKey("VarianceCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.Delivery", b =>
                {
                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "BloodLoss")
                        .WithMany()
                        .HasForeignKey("BloodLossId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "DeliveryMode")
                        .WithMany()
                        .HasForeignKey("DeliveryModeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "HIVTested")
                        .WithMany()
                        .HasForeignKey("HIVTestedId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "MeconiumStainedLiquor")
                        .WithMany()
                        .HasForeignKey("MeconiumStainedLiquorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.MotherClinicVisit", "MotherClinicVisit")
                        .WithMany()
                        .HasForeignKey("MotherClinicVisitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "ObstructedLabour")
                        .WithMany()
                        .HasForeignKey("ObstructedLabourId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "PregnancyOutcome")
                        .WithMany()
                        .HasForeignKey("PregnancyOutcomeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "RescuscitationDone")
                        .WithMany()
                        .HasForeignKey("RescuscitationDoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "SupportStatus")
                        .WithMany()
                        .HasForeignKey("SupportStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.District", b =>
                {
                    b.HasOne("MCHMIS.Models.Constituency", "Constituency")
                        .WithMany()
                        .HasForeignKey("ConstituencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.GeoMaster", "GeoMaster")
                        .WithMany("Districts")
                        .HasForeignKey("GeoMasterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.Division", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.DrugsAdministered", b =>
                {
                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.Enumerator", b =>
                {
                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "EnumeratorGroup")
                        .WithMany()
                        .HasForeignKey("EnumeratorGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Village", "Village")
                        .WithMany()
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.FamilyPlanning", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.FingerPrintVerification", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.FundRequest", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.PaymentCycle", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApprovalStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.GeoMaster", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.HealthFacility", b =>
                {
                    b.HasOne("MCHMIS.Models.SubCounty", "SubCounty")
                        .WithMany()
                        .HasForeignKey("SubCountyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.HouseholdReg", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.CommunityArea", "CommunityArea")
                        .WithMany()
                        .HasForeignKey("CommunityAreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "ExitReason")
                        .WithMany()
                        .HasForeignKey("ExitReasonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "IPRSException")
                        .WithMany()
                        .HasForeignKey("IPRSExceptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HouseholdRegMember", "Mother")
                        .WithMany()
                        .HasForeignKey("MotherId");

                    b.HasOne("MCHMIS.Models.County", "OtherCounty")
                        .WithMany()
                        .HasForeignKey("OtherCountyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Programme", "Programme")
                        .WithMany()
                        .HasForeignKey("ProgrammeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Reason", "Reason")
                        .WithMany()
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SubLocation", "SubLocation")
                        .WithMany()
                        .HasForeignKey("SubLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Village", "Village")
                        .WithMany()
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.HouseholdRegAsset", b =>
                {
                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "AssetType")
                        .WithMany()
                        .HasForeignKey("AssetTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HouseholdReg", "Household")
                        .WithMany("HouseholdRegAssets")
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.HouseholdRegCharacteristic", b =>
                {
                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "BenefitFromFriendsRelative")
                        .WithMany()
                        .HasForeignKey("BenefitFromFriendsRelativeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "CookingFuelSource")
                        .WithMany()
                        .HasForeignKey("CookingFuelSourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "FloorMaterial")
                        .WithMany()
                        .HasForeignKey("FloorMaterialId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "HasSkippedMeal")
                        .WithMany()
                        .HasForeignKey("HasSkippedMealId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "HouseholdCondition")
                        .WithMany()
                        .HasForeignKey("HouseholdConditionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "IsReceivingOtherBenefit")
                        .WithMany()
                        .HasForeignKey("IsReceivingOtherBenefitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "LightingSource")
                        .WithMany()
                        .HasForeignKey("LightingSourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "OtherProgrammesBenefitType")
                        .WithMany()
                        .HasForeignKey("OtherProgrammesBenefitTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "RoofMaterial")
                        .WithMany()
                        .HasForeignKey("RoofMaterialId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "TenureOwnerOccupied")
                        .WithMany()
                        .HasForeignKey("TenureOwnerOccupiedId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "TenureStatus")
                        .WithMany()
                        .HasForeignKey("TenureStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "ToiletType")
                        .WithMany()
                        .HasForeignKey("ToiletTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "UnitRisk")
                        .WithMany()
                        .HasForeignKey("UnitRiskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "WallMaterial")
                        .WithMany()
                        .HasForeignKey("WallMaterialId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "WaterSource")
                        .WithMany()
                        .HasForeignKey("WaterSourceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.HouseholdRegMember", b =>
                {
                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "ChronicIllness")
                        .WithMany()
                        .HasForeignKey("ChronicIllnessId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HouseholdRegMember", "DisabilityCaregiver")
                        .WithMany()
                        .HasForeignKey("DisabilityCaregiverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "DisabilityRequires24HrCare")
                        .WithMany()
                        .HasForeignKey("DisabilityRequires24HrCareId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "DisabilityType")
                        .WithMany()
                        .HasForeignKey("DisabilityTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "EducationAttendance")
                        .WithMany()
                        .HasForeignKey("EducationAttendanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "EducationLevel")
                        .WithMany()
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "FatherAlive")
                        .WithMany()
                        .HasForeignKey("FatherAliveId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "FormalJobType")
                        .WithMany()
                        .HasForeignKey("FormalJobTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HouseholdReg", "Household")
                        .WithMany("HouseholdRegMembers")
                        .HasForeignKey("HouseholdId");

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "IdentificationForm")
                        .WithMany()
                        .HasForeignKey("IdentificationFormId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "IllnessType")
                        .WithMany()
                        .HasForeignKey("IllnessTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "MaritalStatus")
                        .WithMany()
                        .HasForeignKey("MaritalStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "MotherAlive")
                        .WithMany()
                        .HasForeignKey("MotherAliveId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "OccupationType")
                        .WithMany()
                        .HasForeignKey("OccupationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "OrphanhoodType")
                        .WithMany()
                        .HasForeignKey("OrphanhoodTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "Relationship")
                        .WithMany()
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "SchoolType")
                        .WithMany()
                        .HasForeignKey("SchoolTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "SpouseInHousehold")
                        .WithMany()
                        .HasForeignKey("SpouseInHouseholdId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.HouseholdRegMemberDisability", b =>
                {
                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "Disability")
                        .WithMany()
                        .HasForeignKey("DisabilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HouseholdRegMember", "HouseholdRegMember")
                        .WithMany("HouseholdRegMemberDisabilities")
                        .HasForeignKey("HouseholdRegMemberId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.HouseholdRegOtherProgramme", b =>
                {
                    b.HasOne("MCHMIS.Models.HouseholdReg", "Household")
                        .WithMany("HouseholdRegOtherProgrammes")
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "OtherProgramme")
                        .WithMany()
                        .HasForeignKey("OtherProgrammeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.InstallationSetup", b =>
                {
                    b.HasOne("MCHMIS.Models.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.KeyMilestone", b =>
                {
                    b.HasOne("MCHMIS.Models.ClinicVisit", "ClinicVisit")
                        .WithMany()
                        .HasForeignKey("ClinicVisitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.Location", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Division", "Division")
                        .WithMany("Locations")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.MotherClinicVisit", b =>
                {
                    b.HasOne("MCHMIS.Models.CaseManagement", "CaseManagement")
                        .WithMany()
                        .HasForeignKey("CaseManagementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ClinicVisit", "ClinicVisit")
                        .WithMany()
                        .HasForeignKey("ClinicVisitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.MotherPreventiveService", b =>
                {
                    b.HasOne("MCHMIS.Models.PregnancyData", "PregnancyData")
                        .WithMany("MotherPreventiveServices")
                        .HasForeignKey("PregnancyDataId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "PreventiveService")
                        .WithMany()
                        .HasForeignKey("PreventiveServiceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.Notes", b =>
                {
                    b.HasOne("MCHMIS.Models.NotesCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HouseholdReg", "Household")
                        .WithMany("Notes")
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.Payment", b =>
                {
                    b.HasOne("MCHMIS.Models.Beneficiary", "Beneficiary")
                        .WithMany()
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.PaymentCycle", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.FundRequest", "FundRequest")
                        .WithMany()
                        .HasForeignKey("FundRequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Payroll", "Payroll")
                        .WithMany("Payments")
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.PaymentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SubCounty", "SubCounty")
                        .WithMany()
                        .HasForeignKey("SubCountyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Village", "Village")
                        .WithMany()
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.PaymentCycle", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.PaymentTransaction", b =>
                {
                    b.HasOne("MCHMIS.Models.Beneficiary", "Beneficiary")
                        .WithMany()
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.FundRequest", "FundRequest")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("FundRequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.PaymentPoint", "PaymentPoint")
                        .WithMany()
                        .HasForeignKey("PaymentPointId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.PaymentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SubCounty", "SubCounty")
                        .WithMany()
                        .HasForeignKey("SubCountyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Village", "Village")
                        .WithMany()
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.Payroll", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.PaymentCycle", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.FundRequest", "FundRequest")
                        .WithMany()
                        .HasForeignKey("FundRequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "ReconciledBy")
                        .WithMany()
                        .HasForeignKey("ReconciledById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "ReconciliationApprovedBy")
                        .WithMany()
                        .HasForeignKey("ReconciliationApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApprovalStatus", "ReconciliationStatus")
                        .WithMany()
                        .HasForeignKey("ReconciliationStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApprovalStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.PayrollException", b =>
                {
                    b.HasOne("MCHMIS.Models.PayrollExceptionType", "ExceptionType")
                        .WithMany()
                        .HasForeignKey("ExceptionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.PMTCTIntervention", b =>
                {
                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "Intervention")
                        .WithMany()
                        .HasForeignKey("InterventionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.PMTCTService", "PMTCTService")
                        .WithMany("PMTCTInterventions")
                        .HasForeignKey("PMTCTServiceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.PMTCTService", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.PMTScore", b =>
                {
                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "Constant")
                        .WithMany()
                        .HasForeignKey("ConstantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.HouseholdReg", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "Locality")
                        .WithMany()
                        .HasForeignKey("LocalityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.PMTWeight", b =>
                {
                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "Constant")
                        .WithMany()
                        .HasForeignKey("ConstantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "Locality")
                        .WithMany()
                        .HasForeignKey("LocalityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.PostNatalExamination", b =>
                {
                    b.HasOne("MCHMIS.Models.ClinicVisit", "ClinicVisit")
                        .WithMany()
                        .HasForeignKey("ClinicVisitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "FPCounseling")
                        .WithMany()
                        .HasForeignKey("FPCounselingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "FPMethod")
                        .WithMany()
                        .HasForeignKey("FPMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.MotherClinicVisit", "MotherClinicVisit")
                        .WithMany()
                        .HasForeignKey("MotherClinicVisitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "SupportStatus")
                        .WithMany()
                        .HasForeignKey("SupportStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.PostNatalExaminationDetail", b =>
                {
                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "ARTProphylaxisGiven")
                        .WithMany()
                        .HasForeignKey("ARTProphylaxisGivenId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "CPInitiated")
                        .WithMany()
                        .HasForeignKey("CPInitiatedId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Child", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "FeedingMethod")
                        .WithMany()
                        .HasForeignKey("FeedingMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "ImmunizationStarted")
                        .WithMany()
                        .HasForeignKey("ImmunizationStartedId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.PostNatalExamination", "PostNatalExamination")
                        .WithMany("Details")
                        .HasForeignKey("PostNatalExaminationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.PostNatalMilestone", b =>
                {
                    b.HasOne("MCHMIS.Models.KeyMilestone", "KeyMilestone")
                        .WithMany()
                        .HasForeignKey("KeyMilestoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.PostNatalExaminationDetail")
                        .WithMany("PostNatalMilestones")
                        .HasForeignKey("PostNatalExaminationDetailId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.Pregnancy", b =>
                {
                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "BloodGroup")
                        .WithMany()
                        .HasForeignKey("BloodGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "BreastfeedingCounselingDone")
                        .WithMany()
                        .HasForeignKey("BreastfeedingCounselingDoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.CaseManagement", "CaseManagement")
                        .WithMany()
                        .HasForeignKey("CaseManagementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "InfantFeedingCounselingDone")
                        .WithMany()
                        .HasForeignKey("InfantFeedingCounselingDoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Reason", "Reason")
                        .WithMany()
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "Rhesus")
                        .WithMany()
                        .HasForeignKey("RhesusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.CaseManagementStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SystemCodeDetail", "SupportStatus")
                        .WithMany()
                        .HasForeignKey("SupportStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.PregnancyData", b =>
                {
                    b.HasOne("MCHMIS.Models.ClinicVisit", "ClinicVisit")
                        .WithMany()
                        .HasForeignKey("ClinicVisitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.MotherClinicVisit", "MotherClinicVisit")
                        .WithMany()
                        .HasForeignKey("MotherClinicVisitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.PrePayrollCheck", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.PaymentCycle", "PaymentCycle")
                        .WithMany()
                        .HasForeignKey("PaymentCycleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApprovalStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.PrePayrollChecksDetail", b =>
                {
                    b.HasOne("MCHMIS.Models.PrePayrollAction", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Beneficiary", "Beneficiary")
                        .WithMany()
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.PayrollException", "Exception")
                        .WithMany()
                        .HasForeignKey("ExceptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.PrePayrollCheck", "PrePayrollCheck")
                        .WithMany("PrePayrollChecksDetails")
                        .HasForeignKey("PrePayrollCheckId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApprovalStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.PrePayrollTransaction", b =>
                {
                    b.HasOne("MCHMIS.Models.PaymentPoint", "PaymentPoint")
                        .WithMany()
                        .HasForeignKey("PaymentPointId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.Report", b =>
                {
                    b.HasOne("MCHMIS.Models.ReportCategory", "ReportCategory")
                        .WithMany()
                        .HasForeignKey("ReportCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.RoleProfile", b =>
                {
                    b.HasOne("MCHMIS.Models.SystemTask", "SystemTask")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.SMS", b =>
                {
                    b.HasOne("MCHMIS.Models.ClinicVisit", "ClinicVisit")
                        .WithMany()
                        .HasForeignKey("ClinicVisitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.SubCounty", b =>
                {
                    b.HasOne("MCHMIS.Models.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.SubLocation", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Location", "Location")
                        .WithMany("SubLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.SystemCode", b =>
                {
                    b.HasOne("MCHMIS.Models.SystemModule", "SystemModule")
                        .WithMany()
                        .HasForeignKey("SystemModuleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.SystemCodeDetail", b =>
                {
                    b.HasOne("MCHMIS.Models.SystemCode", "SystemCode")
                        .WithMany("SystemCodeDetails")
                        .HasForeignKey("SystemCodeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.SystemTask", b =>
                {
                    b.HasOne("MCHMIS.Models.SystemTask", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.Village", b =>
                {
                    b.HasOne("MCHMIS.Models.SubLocation", "SubLocation")
                        .WithMany()
                        .HasForeignKey("SubLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MCHMIS.Models.Ward", b =>
                {
                    b.HasOne("MCHMIS.Models.Constituency", "Constituency")
                        .WithMany()
                        .HasForeignKey("ConstituencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MCHMIS.Models.SubCounty", "SubCounty")
                        .WithMany()
                        .HasForeignKey("SubCountyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MCHMIS.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MCHMIS.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
